name: Insurance SAM Tests

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'
      - 'tests/**'
      - 'samplicity/**'
      - '.proofs/**'
      - 'requirements.txt'

jobs:
  test:
    runs-on: windows-latest  # Required for xlwings
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for proper version checks
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Specify your Python version
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-html pandas xlwings
        pip install -r requirements.txt
        
    - name: Verify required files
      run: |
        python -c "
        from pathlib import Path
        import sys
        
        required_files = [
            '.proofs/sam_scr.p',
            'samplicity/proofs/proofs.xlsx'
        ]
        
        missing = [f for f in required_files if not Path(f).exists()]
        if missing:
            print(f'Missing required files: {missing}')
            sys.exit(1)
        "
      
    - name: Run tests
      run: |
        pytest tests/ -v --html=test-results.html --self-contained-html
      env:
        PYTHONPATH: ${{ github.workspace }}
        
    - name: Process test results
      if: always()
      run: |
        python tests/process_results.py
        
    - name: Generate PR comment
      if: github.event_name == 'pull_request' && always()
      shell: python
      run: |
        import json
        import os
        
        with open('test_results.csv', 'r') as f:
            results = f.read()
            
        # Create formatted comment
        comment = "## SAM Calculation Test Results\n\n"
        
        if os.path.exists('test_summary.json'):
            with open('test_summary.json', 'r') as f:
                summary = json.load(f)
                
            comment += f"üéØ Overall Pass Rate: {summary['overall_pass_rate']}%\n\n"
            comment += "### Results by Module\n"
            comment += "|Module|Pass Rate|Tests Passed|Total Tests|\n"
            comment += "|------|----------|------------|------------|\n"
            
            for module in summary['module_results']:
                emoji = "‚úÖ" if module['pass_rate'] == 100 else "‚ö†Ô∏è"
                comment += f"|{emoji} {module['class']}|{module['pass_rate']}%|{module['passed']}/{module['total']}|\n"
            
            if summary['failed_tests']:
                comment += "\n### Failed Tests\n"
                for test in summary['failed_tests']:
                    comment += f"- {test['class']} - {test['category']}\n"
                    comment += f"  - Expected: {test['expected']:.2f}\n"
                    comment += f"  - Got: {test['actual']:.2f}\n"
        
        with open('pr_comment.txt', 'w') as f:
            f.write(comment)
            
    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('pr_comment.txt', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: comment
          });
          
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results.html
          test_summary.json
          test_results.csv
        retention-days: 14